'''TreeStatistics
Given a random binary tree of N elements, your task is to compute the following tree statistics:

the sum of heights of each element.
the sum of depths of each element.
Note: The input binary tree is represented in preorder format with null links.

Input Format

First line of input contains T - the number of testcases.
T testcases follow. Each testcase consists of preorder format of a binary tree in a line, and a symbol # represents None/NULL.
Constraints

1 <= T <= 10^2
1 <= N <= 10^3
1 <= elements of tree <= 10^9
Output Format

For each testcase, output a line with an expected answer.

Sample Input 0

2
2 5 8 # # 9 # # 7
1 2 3 4 5
Sample Output 0

8 11
15 15
Explanation 0

Testcase1:

      2
    /  \
   5    7
 /  \
8    9

Sum of heights = height(2) + height(5) + height(7) + height(8) + heigh(9)
             = 3 + 2 + 1 + 1 + 1
             = 8

Sum of depths = depth(2) + depth(5) + depth(7) + depth(8) + depth(9)
              = 1 + 2 + 2 + 3 + 3
              = 11
Testcase2:

        1
       /
      2
     /
    3
   /
  4
 /
5'''


class TreeNode():
    def __init__(self,val):
        self.val = val
        self.left = None
        self.right = None

def insert(a,root,val):
    if not a:
        return None
    val=a.pop(0)
    if val!='#':
        if root is None:
            root=TreeNode(int(val))
        root.left=insert(a,root.left,val)
        root.right=insert(a,root.right,val)
    else:
        return None
    return root

def height(root,sum):
    if root is None:
         return 0 
    l=height(root.left,sum)    
    r=height(root.right,sum)
    sum[0]+=max(l,r)+1
    return max(l,r)+1

def width(root,sum):
    q=[]
    q.append(root)
    l=[]
    while q:
        count=len(q)
        s=[]
        for m in range(count):
            a=q.pop(0)
            s.append(a.val)
            if a.left:
                q.append(a.left)
            if a.right:
                q.append(a.right)
        l.append(s)
    k=1 
    for i in l:
         sum[0]+=k*len(i)
         k+=1
    return sum[0]

import sys
sys.setrecursionlimit(10000)
input = sys.stdin.readline       

def main():
    t = int(input())
    
    for _ in range(t):
        sum=[0]
        root=None
        a = input().split()
        root=insert(a,root,None)
        height(root,sum)
        print(sum[0],end=' ')
        sum=[0]
        width(root,sum)
        print(sum[0],end=' ')
        print()
main()
