'''Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.'''



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        m1=[]
        a=l1
        while a:
             m1.append(a.val)
             a=a.next
        m2=[] 
        b=l2 
        while b:
            m2.append(b.val)
            b=b.next 
        m1.reverse()
        m2.reverse()
        a=int(''.join(map(str,m1))) if m1 else 0
        b=int(''.join(map(str,m2))) if m2 else 0 
        c=a+b
        head=None
        class ListNode():
            def __init__(self, x):
                self.val = x
                self.next = None

        def addFirst(head, val):
            tmp = ListNode(val)
            tmp.next = head
            return tmp
        for i in str(c):
            head=addFirst(head,i)
        return head
            
