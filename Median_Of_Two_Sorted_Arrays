'''Median of Two Sorted Arrays

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106'''
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
       a=[0]*(len(nums1)+len(nums2)) 
       i,j,k=0,0,0 
       while i<len(nums1) and j<len(nums2):
                if nums1[i]<nums2[j]:
                    a[k]=nums1[i]
                    i+=1 
                    
                else:
                        a[k]=nums2[j]
                        j +=1 
                k+=1 
       while i<len(nums1):
                    a[k]=nums1[i]
                    i+=1 
                    k+=1 
       while j<len(nums2):
                    a[k]=nums2[j]
                    j+=1 
                    k+=1
       i,j=0,len(a)-1
       mid=(i+j)//2 
       if len(a)%2!=0:
           return a[mid]
       return (a[mid]+a[mid+1])/2

        
